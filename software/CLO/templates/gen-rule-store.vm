#if( "$!info.getPackageName()" != "" ) 
package $info.getPackageName();

#end
#set($parserName = $info.getParserName())
import ie.ucd.clops.runtime.options.OptionStore;
import ie.ucd.clops.runtime.rules.Action;
import ie.ucd.clops.runtime.rules.Expression;
import ie.ucd.clops.runtime.rules.FlyRule;
import ie.ucd.clops.runtime.rules.OverrideRule;
import ie.ucd.clops.runtime.rules.RuleStore;
import ie.ucd.clops.runtime.rules.ValidityRule;


import java.util.Arrays;
import java.util.List;

/**
 * The rule store is used to handle the constraints and the validity
 * checks associated with the options.
 * @author The CLOPS team (kind@ucd.ie)
 */
public class ${parserName}RuleStore extends RuleStore {

  public ${parserName}RuleStore() {
#foreach($flyrule in $info.getFlyRuleDescriptions())
#set($flyid = $flyrule.getId()) 
#if( "$!flyrule.getConditionText()" != "" )
    Expression<Boolean> rule${flyid}Condition = new Rule${flyid}Condition();
#else
    Expression<Boolean> rule${flyid}Condition = Expression.TRUE;
#end
    FlyRule rule${flyid} = new FlyRule("$flyrule.getTriggeringOptionIdentifier()",rule${flyid}Condition);
    addFlyRule("$flyrule.getTriggeringOptionIdentifier()", rule${flyid});
#foreach($assign in $flyrule.getAssignments())
#set($assigntype = $info.getOptionValuTypeParameterisationForIdentifier($assign.getOptionIdentifier()))
    rule${flyid}.addAction(new Action<$assigntype>("$assign.getOptionIdentifier()", new Rule${flyid}Expression$assign.getId()()));
    
#end
#end    
#foreach($orrule in $info.getOverrideRuleDescriptions())
#set($orid = $orrule.getId())
    Expression<Boolean> rule${orid}Condition = new Rule${orid}Condition();
    OverrideRule rule${orid} = new OverrideRule(rule${orid}Condition);
    addOverrideRule(rule${orid});
#foreach($assign in $orrule.getAssignments())
#set($assigntype = $info.getOptionValuTypeParameterisationForIdentifier($assign.getOptionIdentifier()))
    rule${orid}.addAction(new Action<$assigntype>("$assign.getOptionIdentifier()", new Rule${orid}Expression$assign.getId()()));

#end
#end  
#foreach($valrule in $info.getValidityRuleDescriptions())
#set($valid = $valrule.getId())
    Expression<Boolean> rule${valid}Condition = new Rule${valid}Condition();
    ValidityRule rule${valid} = new ValidityRule(rule${valid}Condition);
    rule${valid}.addAction(new Action<List<String>>("$CLOPSErrorOption.getErrorId()", new Rule${valid}Expression()));
    addValidityRule(rule${valid});
#end
  }

#foreach($flyrule in $info.getFlyRuleDescriptions())
#set($flyid = $flyrule.getId())
#if( "$!flyrule.getConditionText()" != "" )
  public static class Rule${flyid}Condition implements Expression<Boolean> {
    /**
     * {@inheritDoc}
     */
    public Boolean evaluate(OptionStore optionStore) {
      return $flyrule.getConditionText();
    }
  }
    
#end
#foreach($assign in $flyrule.getAssignments())
#set($assigntype = $info.getOptionValuTypeParameterisationForIdentifier($assign.getOptionIdentifier()))
  public static class Rule${flyid}Expression$assign.getId() implements Expression<$assigntype> {
    /**
     * {@inheritDoc}
     */
    public $assigntype evaluate(OptionStore optionStore) {
      return $assign.getValue();
    }
  }
  
#end
#end    
#foreach($orrule in $info.getOverrideRuleDescriptions())
#set($orid = $orrule.getId())
  public static class Rule${orid}Condition implements Expression<Boolean> {
    /**
     * {@inheritDoc}
     */
    public Boolean evaluate(OptionStore optionStore) {
      return $orrule.getConditionText();
    }
  }
    
#foreach($assign in $orrule.getAssignments())
#set($assigntype = $info.getOptionValuTypeParameterisationForIdentifier($assign.getOptionIdentifier()))
  public static class Rule${orid}Expression$assign.getId() implements Expression<$assigntype> {
    /**
     * {@inheritDoc}
     */
    public $assigntype evaluate(OptionStore optionStore) {
      return $assign.getValue();
    }
  }
#end

#end
#foreach($valrule in $info.getValidityRuleDescriptions())
#set($valid = $valrule.getId())
  public static class Rule${valid}Condition implements Expression<Boolean> {
    /**
     * {@inheritDoc}
     */
    public Boolean evaluate(final OptionStore optionStore) {
      return $valrule.getConditionText();
    }
  }
    
  public static class Rule${valid}Expression implements Expression<List<String>> {
    /**
     * {@inheritDoc}
     */
    public List<String> evaluate(final OptionStore optionStore) {
#if ( "$!valrule.getExplanation()" != "" )
#set( $lines = $CodeGenerator.quoteMultilineString($valrule.getExplanation()) )
#if( $lines.size() == 1 ) 
      return Arrays.asList($valrule.getExplanation());
#else
      return Arrays.asList(#foreach( $line in $lines )"${line} "#if($velocityCount != $lines.size()) +
                           #else);#end#end
#end
#else
      return Arrays.asList("");
#end
    }
  }
  
#end
}
