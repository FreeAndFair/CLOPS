
NAME::
 BONc

ARGS::

Print:{"-p","--print"}:{enum}:[choices="SYSO,TXT,DOT,HTML,DIC,IIG,ICG,CL,PICG,PIIG",casesensitive="false"]
 : "Print the parsed input in the given format. TXT for plain-text, HTML for html generation of informal charts, DIC to generate the class dictionary, IIG for the informal class inheritance graph. See the manpage or README.txt for more information and a list of all printing options."
PrintOutput:{"-po","--print-output"}:{file}:[canbedir="false"]
 : "Print output to the given file instead of to stdout."
PrettyPrint:{"-pp","--pretty-print"}
 : "Pretty-print the parsed input. This is equivalent to -p=TXT."

PrintMan:{"--print-man"}:[default="false"]
 : "Print available options in man-page format."
PrintReadme:{"--print-readme"}:[default="false"]
 : "Print available options in readme format."
PrintBashCompletion:{"--print-bash-completion"}:[default="false"]
 : "Print bash completion script for available options."

Help:{"-h","--help"}:[default="false"]
 : "Print this help message."

Time:{"-t","--time"}:[default="false"]
 : "Print timing information."
 
Typecheck:{"-tc","--typecheck"}:[default="true"]
 : "Typecheck the input"
Informal:{"-i","--informal"}
 : "Only check informal charts."
Formal:{"-f","--formal"}
 : "Only check formal charts."
CheckInformal:{"-ci","--check-informal"}:[default="true"]
 : "Check informal charts."
CheckFormal:{"-cf","--check-formal"}:[default="true"]
 : "Check formal diagrams."
CheckConsistency:{"-cc","--check-consistency"}:[default="true"]
 : "Check consistency between levels."

Debug:{"-d","--debug"}:[default="false"]
 : "Print debugging output."

ReadFromStdin:{"-"}:[default="false"]
 : "Read input from stdin."

GenClassDic:{"-gcd","--gen-class-dic"}:[default="false"]
 : "Generate the class dictionary when printing."

Graph:{"-g","--graph"}:{enum}:[choices="ICG,IIG",casesensitive="false"]
 : "Display the chosen graph type. ICG for informal clustering graph, IIG for informal inheritance graph."

Version:{"-v","-version","--version"}:[default="false"]
 : "Print BONc version and exit."

SourceFiles:{}:{file-list}:[between="",canbedir="false",mustexist="true"]
 : "Source files to process."


FORMAT::

  ( Option*  SourceFiles*   ) 
| AloneOption;


WHERE::

Option : AllOptions -AloneOption -SourceFiles;
       
AloneOption : Version OR Help OR PrintMan OR PrintReadme OR PrintBashCompletion;

FLY::

//Need fly rules for typechecking options

Formal {$(Formal)} -> CheckFormal := {true}, CheckInformal := {false}, CheckConsistency := {false};
Informal {$(Informal)} -> CheckInformal := {true}, CheckFormal := {false}, CheckConsistency := {false}, Typecheck := {false};
PrettyPrint {$(PrettyPrint)} -> Print := {"TXT"};

CheckFormal {!$(CheckFormal?)} -> Typecheck := {false}; 

OVERRIDES::

VALIDITY::

{$(Print?) && !$(PrintOutput?)} : "Output file (-po) for printing must be provided." ; 

//If none of the AloneOptions are true
{!$(Version) && !$(Help) && !$(PrintMan) && !$(PrintReadme) && !$(PrintBashCompletion) && 
 !$(ReadFromStdin) && ($(SourceFiles).size() == 0)} 
  : "Must provide at least one source file or read from standard input.";