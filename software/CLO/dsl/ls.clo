NAME:: 
       ls

ARGS::

     all:{"-a", "--all"}
       :"do not ignore entries starting with ."

     almost_all:{"-A", "--almost-all"}
       :"do not list implied . and .."

     author:{"--author"}   
       :"with -l, print the author of each file"

     octal_escapes:{"-b", "--escape"}
       :"print octal escapes for nongraphic characters"

     block_size:{"--block-size"}:{string-regexp}
       :[regexp="(\\d+((kB)|(K)|(MB)|M|G|T|P|E|Z|Y)?)"]
       :"use blocks of the given size"

/*       SIZE  may  be (or may be an integer optionally followed by) 
       one of following: kB 1000, K 1024, MB 1000*1000, M 1024*1024, and so on for G, T, P, E, Z, Y. */



     ignore_backups:{"-B", "--ignore-backups"}
       :"do not list implied entries ending with ~"

     sortby_ctime:{"-c"}
       :"with -lt: sort by, and show, ctime (time of last modification of
        file status information) with -l: show ctime and  sort  by  name
        otherwise: sort by ctime"

     columns:{"-C"}
        :"list entries by columns"

     color:{"--color"}:{string-enum}
        :[default="never" choices="never,always,auto"]
        :"control whether color is used to distinguish file types"

     /*That is equivalent to using --color=none.  Using the --color
       option without the optional WHEN argument is equivalent to
       using --color=always.  With --color=auto, color codes are
       output only if standard output is connected to a terminal
       (tty). The environment variable LS_COLORS can influence the
       colors, and can be set easily by the dircolors command.*/

     directory:{"-d", "--directory"}
        :"list directory entries instead of contents,
          and do not  dereference symbolic links"

     dired:{"-D", "--dired"}
        :"generate output designed for Emacs' dired mode"

     not_sort:{"-f"}
        :"do not sort, enable -aU, disable -lst"

     classify:{"-F", "--classify"}
        :"append indicator (one of */=>@|) to entries"

     file_type:{"--file-type"}
        :"like {classify}, except do not append ‘*’"

     format:{"--format"}:{string-enum}:
              [choice="across,commas,horizontal,longFormat,single-column,verbose,vertical"]
//           across  -x, commas -m, horizontal -x, long -l, single-column -1,
//           verbose -l, vertical -C

     
     full_time:{"--full-time"}
        :"like -l --time-style=full-iso"

     list_group:{"-g"}
        :"like {-l}, but do not list owner"

     no_group:{"-G", "--no-group"}
        :"like {-l}, but do not list group"

     human_readable:{"-h", "--human-readable"}
        :"with -l, print sizes in human readable format (e.g., 1K 234M 2G)"

     human_readable_decimal:{"--si"}
        :"like {human_readable} but use powers of 1000 not 1024"

     dereference-command-line:{"-H", "--dereference-command-line"}
         :"follow symbolic links listed on the command line"

     dereference-command-line-symlink-to-dir:{"--dereference-command-line-symlink-to-dir"}
         :"follow  each  command line symbolic link that points to a directory"

     hide:{"--hide"}:{string}
         :"do not list implied entries matching shell  pattern  (overridden
              by -a or -A)"

     indicator_style:{"--indicator-style"}:{string-enum}
         :[choices="none,slash,file-type,classify" default="none"]
         :"append indicator with style WORD to entry names"
//              none  (default),  slash  (-p), file-type (--file-type), classify
//              (-F)

      inode:{"-i", "--inode"}
         :"with {-l}, print the index number of each file"

      ignores:{"-I", "--ignore"}:{string}
              :"do not list implied entries matching shell pattern"

      oneK_block:{"-k"}:"like --block-size=1K"

      longFormat:{"-l"}:"use a long listing format"

      dereference:{"-L", "--dereference"}
          :"when showing file information for a symbolic link, show information  
            for  the file the link references rather than for the link itself"

      commas:{"-m"}:"fill width with a comma separated list of entries"

      numeric_uid_gid:{"-n", "--numeric-uid-gid"}
           :"like -l, but list numeric user and group IDs"

      literal:{"-N", "--literal"}
          :"print raw entry names (don’t treat e.g. control characters  specially)"

      long_nogroups:{"-o"}:"like {longFormat}, but do not list group information"

       slash:{"-p"}
           :"append / indicator to directories"

       hide_control_chars:{"-q", "--hide-control-chars"}
           :"print ? instead of non graphic characters"

       show_control_chars:{"--show-control-chars"}
           :"show  non  graphic  characters  as-is (default unless program is
              'ls' and output is a terminal)"

       quote_name:{"-Q", "--quote-name"}
           :"enclose entry names in double quotes"

       quoting_style
           :{"--quoting-style"}
           :{string-enum}
           :[choices="literal,locale,shell,shell-always,c,escape"]
           :"use quoting style WORD for entry names"


       reverse:{"-r", "--reverse"}:"reverse order while sorting"

       recursive:{"-R", "--recursive"}:"list subdirectories recursively"

       size:{"-s", "--size"}:"with {longFormat}, print size of each file, in blocks"

       sortby_size:{"-S"}:"sort by file size"

       sort:{"--sort"}
           :{string-enum}
           :"extension,none,size,time,version,status,time,atime,access,use"
//              extension  -X, none -U, size -S, time -t, version -v, status -c,
//              time -t, atime -u, access -u, use -u

       time:{"--time"}:{string-enum}
           :[choices="atime,access,use,ctime,status"]
           :"with -l, show time as WORD instead of modification time:  atime,
              access,  use, ctime or status; use specified time 
              as sort key if {sort}=time"

       time_style:{"--time-style"}:{string-regexp}
           :[regexp="((full-iso)|(long-iso)|(iso)|(locale)|(\\+.+))"]
           :"with -l, show times using style"             
// TODO
/*              STYLE: full-iso, long-iso,  iso,
              locale,  +FORMAT.   FORMAT is interpreted like ‘date’; if FORMAT
              is FORMAT1<newline>FORMAT2, FORMAT1 applies to non-recent  files
              and FORMAT2 to recent files; if STYLE is prefixed with ‘posix-’,
              STYLE takes effect only outside the POSIX locale */

       sortby_modificationtime:{"-t"}:"sort by modification time"

       tabsize:{"-T", "--tabsize"}:{int}:[min="0" default="8"]
          :"assume given tab stops"

       access_time:{"-u"}:
            "with -lt: sort by, and show, access time with  -l: show access
             time and sort by name otherwise: sort by access time"

       unordered:{"-U"}:"do not sort; list entries in directory order"

       sortby_version:{"-v"}:"sort by version"

       width:{"-w", "--width"}:{int}:[min="0"]
         :"assume screen width instead of current value"

       horizontal:{"-x"}:"list entries by lines instead of by columns"

       sortby_entryextension:{"-X"}:"sort alphabetically by entry extension"

       one:{"-1"}:"list one file per line"

/*       SELINUX options:

       {"--lcontext"}
              Display  security  context.    Enable -l. Lines will probably be
              too wide for most displays.

       {"-Z", "--context"}
              Display security context so it fits on most displays.   Displays
              only mode, user, group, security context and file name.

       {"--scontext"}
              Display only security context and file name.
*/

       help:{"--help"}:"display this help and exit"

       version:{"--version"}:"output version information and exit"


FORMAT::
  help | version;

WHERE::

FLY::
/*   across <-> format="across";
   horizontal <-> format="across";
   commas <-> format="commas";
   longFormat <-> format="long";
   single-column <-> format="single-column";
   verbose <-> format="verbose";
   vertical <-> format="vertical";

   slash <-> indicator_style="slash";
   file_type <-> indicator_style="file-type";
   classify <-> indicator_style="classify";

   oneK_block <-> block_size=1024;

   sort="extension" <-> sortby_extension;
   sort="none" <-> sortby_none;
   sort="size" <-> sortby_size;
   sort="time" <-> sortby_time;
   sort="version" <-> sortby_version;
   sort="status" <-> sortby_status;
   sort="time" <-> sortby_time;
   sort="atime" <-> sortby_atime;
   sort="access" <-> sortby_access;
   sort="use" <-> sortby_use;
*/


