/** Declarative specification of command line options,
 *  with ESC/Java2 as a case study and example.
 *
 *	Using first-order JML with generalised quantifiers over finite domains
 *  as a domain specific language for command line options
 */
 
 // JML Model Classes for Command Line Interfaces
  
 /**
  * Command Line Option
  * 
  * <BON>
  * class_chart COMMAND_LINE_OPTION
  * explanation
  *   "Keyword which activates a feature of the software"
  * query
  *   "What features do I override?",
  *   "What features do I change the default of?",
  *   "What features am I valid with?"
  * command
  *   "Exclude that feature!",
  *   "Override that feature!",
  *   "Enable that feature by default!" 
  * end
  * </BON>
   */
  public abstract class CommandLineOption {
	  
	  // Default means not set explicitly, taken to
	  // be false unless set by another command line option
	  public class Visibility = enum {True,False,Default};
	  
	  // The setting of the command line option
	  State visibility;
	  
	  /**
	   *@ ensures \result == visibility;
	   */
	  public State getState();
  
	  /**
	   *@ ensures ! (this.overrides (option) && option.overrides (this));
	   */
	  public boolean isValidWith (CommandLineOption option);
	  
	  /**
	   * Negative implication
	   * 
	   *@ ensures ! (option.Enabled() && this.isEnabled());
	   */
	  public boolean overrides (CommandLineOption option);
	  
	  /**
	   *@ ensures !thisEnabled() || (this.Enabled() && option.Enabled());
	   */
	  public boolean defaults (CommandLineOption option);
	  
	  /**
	   * @ensures !thisIsValidWith (option);
	   */
	  public void exclude (CommandLineOption option);
	  
	  /**
	   * @ensures (implies_default && this.defaults(option)) || (!implies_default && this.overrides(option));
	   */
	  public void implies (CommandLineOption option, boolean implies_default);
  }